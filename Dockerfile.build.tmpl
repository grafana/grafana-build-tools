FROM docker.io/library/golang:{{ .data.go }} AS go
	COPY lib/go.env /usr/local/go/
	RUN mkdir -p /build/bin

FROM go AS go_jsonnet
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/google/go-jsonnet/cmd/jsonnet@{{ .data.go_jsonnet }}
	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/google/go-jsonnet/cmd/jsonnetfmt@{{ .data.go_jsonnet }}
	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/google/go-jsonnet/cmd/jsonnet-deps@{{ .data.go_jsonnet }}
	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/google/go-jsonnet/cmd/jsonnet-lint@{{ .data.go_jsonnet }}

FROM go AS wire
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/google/wire/cmd/wire@{{ .data.wire }}

FROM go AS actionlint
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/rhysd/actionlint/cmd/actionlint@{{ .data.actionlint }}

FROM go AS bingo
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/bwplotka/bingo@{{ .data.bingo }}

FROM go AS chglog
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} CGO_ENABLED=0 go install github.com/goreleaser/chglog/cmd/chglog@{{ .data.chglog }}

FROM go AS lefthook
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/evilmartians/lefthook@{{ .data.lefthook }}

FROM go AS dockerfile_json
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN git clone --depth 1 --branch {{ .data.dockerfile_json }} https://github.com/keilerkonzept/dockerfile-json dockerfile-json && \
		cd dockerfile-json && \
		env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} CGO_ENABLED=0 go install -tags=dfrunsecurity .

FROM go AS enumer
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/dmarkham/enumer@{{ .data.enumer }}

FROM go AS oapi_codegen
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@{{ .data.oapi_codegen }}

FROM go AS protoc_gen_go
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install google.golang.org/protobuf/cmd/protoc-gen-go@{{ .data.protoc_gen_go }}

FROM go AS protoc_gen_go_grpc
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@{{ .data.protoc_gen_go_grpc }}

FROM go AS buf
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/bufbuild/buf/cmd/buf@{{ .data.buf }}

FROM go AS mage
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN git clone --depth 1 --branch {{ .data.mage }} https://github.com/magefile/mage mage && \
		cd mage && \
		mkdir -p /host/bin /build/bin/${TARGET_GOOS}-${TARGET_GOARCH} && \
		env GOPATH=/host go run bootstrap.go && \
		env /host/bin/mage -compile /build/bin/${TARGET_GOOS}-${TARGET_GOARCH}/mage -goos ${TARGET_GOOS} -goarch ${TARGET_GOARCH}

FROM go AS nfpm
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} CGO_ENABLED=0 go install github.com/goreleaser/nfpm/v2/cmd/nfpm@{{ .data.nfpm }}

FROM go AS nilaway
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install go.uber.org/nilaway/cmd/nilaway@{{ .data.nilaway }}

FROM go AS grizzly
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/grafana/grizzly/cmd/grr@{{ .data.grizzly }}

FROM go AS reviewdog
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/reviewdog/reviewdog/cmd/reviewdog@{{ .data.reviewdog }}

FROM go AS semversort
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/whereswaldon/semversort@{{ .data.semversort }}

FROM go AS golangci_lint
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/golangci/golangci-lint/cmd/golangci-lint@{{ .data.golangci_lint }}

FROM go AS gomplate
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/hairyhenderson/gomplate/v4/cmd/gomplate@{{ .data.gomplate }}

FROM go AS gh
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN git clone --depth 1 --branch {{ .data.gh }} https://github.com/cli/cli gh && \
		cd gh && \
		env GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} CGO_ENABLED=0 make install prefix=/build

FROM go AS git_chglog
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/git-chglog/git-chglog/cmd/git-chglog@{{ .data.git_chglog }}

FROM go AS gotestsum
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install gotest.tools/gotestsum@{{ .data.gotestsum }}

FROM go AS xk6
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	# The grafana/xk6 image only exists for amd64, so we need to build it for
	# the target architecture.
	RUN mkdir -p /host/bin /build/bin/${TARGET_GOOS}-${TARGET_GOARCH} && \
		env GOPATH=/host go install go.k6.io/xk6/cmd/xk6@{{ .data.xk6 }} && \
		env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install go.k6.io/xk6/cmd/xk6@{{ .data.xk6 }}

FROM xk6 AS k6
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	# The grafana/k6 image only exists for amd64, so we need to build it for
	# the architecture we are targeting. The simplest way to build k6 is to
	# (ab)use xk6 to build a binary without any extensions. In the future, if
	# we wanted additional extensions, this is the place to add them.
	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} /host/bin/xk6 build {{ .data.k6 }} --output /build/bin/${TARGET_GOOS}-${TARGET_GOARCH}/k6

FROM go AS yq
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	RUN env GOPATH=/build GOOS=${TARGET_GOOS} GOARCH=${TARGET_GOARCH} go install github.com/mikefarah/yq/v4@{{ .data.yq }}

FROM docker.io/library/debian:stable-slim AS skopeo
	ARG TARGET_GOOS
	ARG TARGET_GOARCH

	COPY --from=go /usr/local/go /usr/local/go
	
	ENV PATH="/usr/local/go/bin:${PATH}"
	
	RUN apt-get update && \
	    apt-get install -y \
	    build-essential \
	    libgpgme-dev \
	    libassuan-dev \
	    libdevmapper-dev \
	    pkg-config \
	    git
	
	# skopeo is used to inspect container registries. This can be used to
	# inspect the available versions without pulling the repos.
	RUN git clone https://github.com/containers/skopeo && \
	    cd skopeo && \
	    git checkout "{{ .data.skopeo }}" && \
	    make GOPATH=/build DISABLE_DOCS=1 bin/skopeo.${TARGET_GOOS}.${TARGET_GOARCH} && \
	    mkdir -p /build/bin && \
	    cp bin/skopeo.${TARGET_GOOS}.${TARGET_GOARCH} /build/bin/skopeo

FROM docker.io/library/debian:stable-slim AS final
	RUN mkdir -p /dist
	
	COPY --from=actionlint /build/bin/* /dist/

	COPY --from=bingo /build/bin/* /dist/
	
	COPY --from=buf /build/bin/* /dist/
	
	COPY --from=chglog /build/bin/* /dist/

	COPY --from=dockerfile_json /build/bin/* /dist/
	
	COPY --from=enumer /build/bin/* /dist/
	
	COPY --from=gh /build/bin/* /dist/
	
	COPY --from=git_chglog /build/bin/* /dist/
	
	COPY --from=go_jsonnet /build/bin/* /dist/
	
	COPY --from=golangci_lint /build/bin/* /dist/
	
	COPY --from=gomplate /build/bin/* /dist/

	COPY --from=gotestsum /build/bin/* /dist/
	
	COPY --from=grizzly /build/bin/* /dist/
	
	COPY --from=k6 /build/bin/* /dist/
	
	COPY --from=lefthook /build/bin/* /dist/
	
	COPY --from=mage /build/bin/* /dist/
	
	COPY --from=nfpm /build/bin/* /dist/

	COPY --from=nilaway /build/bin/* /dist/
	
	COPY --from=oapi_codegen /build/bin/* /dist/
	
	COPY --from=protoc_gen_go /build/bin/* /dist/
	
	COPY --from=protoc_gen_go_grpc /build/bin/* /dist/

	COPY --from=reviewdog /build/bin/* /dist/
	
	COPY --from=semversort /build/bin/* /dist/
	
	COPY --from=skopeo /build/bin/* /dist/
	
	COPY --from=wire /build/bin/* /dist/
	
	COPY --from=xk6 /build/bin/* /dist/

	COPY --from=yq /build/bin/* /dist/
