FROM {{ .data.go.repo }}:{{ .data.go.version }} as go

    COPY lib/go.env /usr/local/go

FROM go as tools

    RUN env GOBIN=/build go install {{ .data.jsonnet.repo }}/cmd/jsonnet@{{ .data.jsonnet.version }}
    RUN env GOBIN=/build go install {{ .data.jsonnet.repo }}/cmd/jsonnetfmt@{{ .data.jsonnet.version }}
    RUN env GOBIN=/build go install {{ .data.jsonnet.repo }}/cmd/jsonnet-deps@{{ .data.jsonnet.version }}
    RUN env GOBIN=/build go install {{ .data.jsonnet.repo }}/cmd/jsonnet-lint@{{ .data.jsonnet.version }}

    # Add wire
    RUN env GOBIN=/build go install {{ .data.wire.repo }}/cmd/wire@{{ .data.wire.version }}

    # Add bingo
    RUN env GOBIN=/build go install {{ .data.bingo.repo }}@{{ .data.bingo.version }}

    # Add enumer
    RUN env GOBIN=/build go install {{ .data.enumer.repo }}@{{ .data.enumer.version }}

    # Add protoc-gen-go
    RUN env GOBIN=/build go install {{ .data.protobuf.repo }}/cmd/protoc-gen-go@{{ .data.protobuf.version }}

    # Add protoc-gen-go-grpc
    RUN env GOBIN=/build go install {{ .data.grpc.repo }}/cmd/protoc-gen-go-grpc@{{ .data.grpc.version }}

    # Add buf
    RUN env GOBIN=/build go install {{ .data.buf.repo }}/cmd/buf@{{ .data.buf.version }}

    # Add mage
    RUN git clone --depth 1 --branch {{ .data.mage.version }} https://{{ .data.mage.repo }} mage && \
        cd mage && \
        env GOBIN=/build go run bootstrap.go

    # Add nilaway
    RUN env GOBIN=/build go install {{ .data.nilaway.repo }}/cmd/nilaway@{{ .data.nilaway.version }}

    # Add grizzly
    RUN env GOBIN=/build go install {{ .data.grizzly.repo }}/cmd/grr@{{ .data.grizzly.version }}

    # Add semversort
    RUN env GOBIN=/build go install {{ .data.semversort.repo }}@{{ .data.semversort.version }}

    # Add golangci-lint
    RUN env GOBIN=/build go install {{ (index .data "golangci-lint").repo }}/cmd/golangci-lint@{{ (index .data "golangci-lint").version }}

    # Add shellcheck
    COPY --from={{ .data.shellcheck.repo }}:{{ .data.shellcheck.version }} /bin/shellcheck /build

    # Add git-chglog
    RUN env GOBIN=/build go install {{ (index .data "git-chglog").repo }}/cmd/git-chglog@{{ (index .data "git-chglog").version }}

    # Add gotestsum
    RUN env GOBIN=/build go install {{ .data.gotestsum.repo }}@{{ .data.gotestsum.version }}

    # Add jq
    COPY --from={{ .data.jq.repo }}:{{ .data.jq.version }} /jq /build

FROM go AS k6
    # The grafana/xk6 image only exists for amd64, so we need to build it for
    # the target architecture.
    RUN env GOBIN=/build go install {{ .data.xk6.repo }}/cmd/xk6@{{ .data.xk6.version }}

    # The grafana/k6 image only exists for amd64, so we need to build it for
    # the architecture we are targeting. The simplest way to build k6 is to
    # (ab)use xk6 to build a binary without any extensions. In the future, if
    # we wanted additional extensions, this is the place to add them.
    RUN /build/xk6 build {{ .data.k6.version }} --output /build/k6

FROM registry.hub.docker.com/library/debian:stable-slim as skopeo

    COPY --from=go /usr/local/go /usr/local/go

    ENV PATH="/usr/local/go/bin:${PATH}"

    RUN apt-get update && \
        apt-get install -y \
        build-essential \
        libgpgme-dev \
        libassuan-dev \
        libdevmapper-dev \
        pkg-config \
        git

    # skopeo is used to inspect container registries. This can be used to
    # inspect the available versions without pulling the repos.
    RUN git clone https://{{ .data.skopeo.repo }} && \
        cd skopeo && \
        make GOBIN=/build DISABLE_DOCS=1 bin/skopeo && \
        mkdir -p /build && \
        cp bin/skopeo /build/

FROM registry.hub.docker.com/library/debian:stable-slim AS final

    RUN apt-get update && \
        apt-get install -y \
            build-essential \
            docker.io \
            file \
            git \
            pkg-config \
            libgpgme11 \
            && \
        rm -rf /var/lib/apt/lists

    COPY --from=go /usr/local/go /usr/local/go
    ENV PATH="/usr/local/go/bin:${PATH}"

    # Keep tools in /usr/local/bin. That makes it a little bit easier to see
    # what comes from the image vs stuff coming from the base image.
    COPY --from=tools /build/* /usr/local/bin/

    COPY --from=k6 /build/* /usr/local/bin/

    COPY --from=skopeo /build/* /usr/local/bin/

    COPY lib/image-test /usr/local/bin

    COPY lib/get-latest-gbt-version /usr/local/bin
