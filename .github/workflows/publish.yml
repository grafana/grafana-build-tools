name: "Publish container image (test)"

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
    branches:
      - main

permissions:
  contents: none
  packages: none

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  build:
    name: Publish container images
    strategy:
      matrix:
        arch:
          - x64
          - arm64
    runs-on: github-hosted-ubuntu-${{ matrix.arch }}-large
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Describe the current state
        run: git describe --tags --always

      - name: Map architecture
        id: map_arch
        run: ./lib/map-os-arch linux "${{ matrix.arch }}" HOST >> "$GITHUB_OUTPUT"

      - name: Image metadata
        id: image_metadata
        run: |
          echo "IMAGE_NAME=ghcr.io/${{ github.repository }}" >> "$GITHUB_OUTPUT"

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ steps.image_metadata.outputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{raw}}
            type=sha

      - name: Generate Dockerfile
        run: |
          make Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Login to GitHub Package Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build local image
        # This step is doing the heavy lifting of building the image, and
        # populating the cache. The step below, after testing, is repeating
        # this build, but pushing the image to the registry.
        id: build-local-image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile
          load: true
          platforms: ${{ steps.map_arch.outputs.HOST_OS }}/${{ steps.map_arch.outputs.HOST_ARCH }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          tags: ${{ steps.image_metadata.outputs.IMAGE_NAME }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=false
          cache-from: type=gha,scope=final
          cache-to: type=gha,mode=min,scope=final
          build-args: |
            TARGET_GOOS=${{ steps.map_arch.outputs.HOST_OS }}
            TARGET_GOARCH=${{ steps.map_arch.outputs.HOST_ARCH }}

      - name: Test image
        run: |
          docker images
          docker inspect ${{ steps.image_metadata.outputs.IMAGE_NAME }}
          docker run --rm '${{ steps.image_metadata.outputs.IMAGE_NAME }}' image-test

      - name: Push partial image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ steps.map_arch.outputs.HOST_OS }}/${{ steps.map_arch.outputs.HOST_ARCH }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          tags: ${{ steps.image_metadata.outputs.IMAGE_NAME }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=final
          cache-to: type=gha,mode=min,scope=final
          build-args: |
            TARGET_GOOS=${{ steps.map_arch.outputs.HOST_OS }}
            TARGET_GOARCH=${{ steps.map_arch.outputs.HOST_ARCH }}

      - name: Export digest
        id: export-digest
        run: |
          mkdir -p "${{ runner.temp }}/digests"
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: digests-${{ steps.map_arch.outputs.HOST_OS }}-${{ steps.map_arch.outputs.HOST_ARCH }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  publish:
    name: Publish container images
    runs-on: github-hosted-ubuntu-x64-small
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    needs:
      - build
    steps:
      - name: Image metadata
        id: image_metadata
        run: |
          echo "IMAGE_NAME=${{ env.IMAGE_REGISTRY }}/${{ github.repository }}" >> "$GITHUB_OUTPUT"

      - name: Download digests
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Package Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ steps.image_metadata.outputs.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{raw}}
            type=sha

      - name: Create manifest list and push
        id: manifest
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.image_metadata.outputs.IMAGE_NAME }}@sha256:%s ' *)
          docker buildx imagetools inspect \
            --format '{{json .Manifest}}' \
            "${{ steps.image_metadata.outputs.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" |
          jq -r 'digest=\(.digest)' >> "$GITHUB_OUTPUT"

      - name: Write attestations
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        id: attest
        with:
          subject-name: ${{ steps.image_metadata.outputs.IMAGE_NAME }}
          subject-digest: ${{ steps.manifest.outputs.digest }}
          push-to-registry: true
